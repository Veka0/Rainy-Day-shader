#include "fragmentHeader.h"
precision highp float;
#include "ACES.glsl"

#include "uniformWorldConstants.h"
#include "uniformWeatherConstants.h"
#include "uniformPerFrameConstants.h"

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

in vec3 viewPosition;

#ifdef GL_EXT_shader_framebuffer_fetch
#define gl_LastFragColorARM finalColor
inout vec4 finalColor;
#else
out vec4 finalColor;
#endif

#define PI 3.14159265359

// Atmospheric scattering function.
vec3 calcScatter(vec3 col, vec3 dir, float dist, float alpha, vec3 sunCol) {
	// Mie scattering
	const vec3 MieSc = 25.0 * vec3(0.000750904, 0.00127994, 0.00220690);

	// Henyey-Greenstein phase function parameter 
	const float g = 0.5;

	// Rayleigh scattering
	const vec3 RayleighSc = vec3(6.95e-6, 1.18e-5, 2.44e-5);

	// Extinction coefficient = Mie absorption + Mie scattering + Rayleigh scattering
	const vec3 Cex = -(0.0 + MieSc + RayleighSc);

	// Pre-compute stuff
	const vec3 rayleigh = -20.0*RayleighSc*3.0/(16.0*PI*Cex);
	const vec3 mie = -20.0*MieSc*(1.0-g*g)/(4.0*PI*Cex);
	const float OnePlusGG = 1.0+g*g;
	const float TwoTimesG = -2.0*g;
	
	// Note: Rayleigh scattering has no visible effect with current parameters
	vec3 sc = rayleigh*(1.0+dir.y*dir.y) + mie*pow(TwoTimesG*dir.y+OnePlusGG, -1.5);
	return mix(alpha * sc * sunCol, col, exp(Cex*dist));
}

void main()
{
	// Sample depth and sun color early.
	float depth = gl_LastFragDepthARM;
	vec3 sunColor = texture( TEXTURE_2, vec2(0, 1) ).rgb;

	// Initialize traversal ray marching.
	vec2 pix = vec2(0);
	vec3 pos = VIEW_POSITION.xyz;
	vec3 orig = pos;
	
	vec3 viewPos = (viewPosition / viewPosition.z) * PROJ[3][2] / ((depth * 2.0 - 1.0) + PROJ[2][2]);
	vec3 worldPos = -(inverse(inverse(PROJ)*WORLDVIEWPROJ) * vec4(viewPos, 1.0)).xyz;
	
	vec2 step = sign(worldPos.xz);
	float dist = length(worldPos);
	vec3 dir = worldPos/dist;
	
	vec2 offset = 0.5*step - orig.xz + 0.5;
	
	// Atmospheric and lightmap lighting factors.
	float L = 0.0;
	float L2 = 0.0;
	
	// Ray marching.
	for (int i = 0; i < RAY_MARCHING_DISTANCE; i++) {
		
		// Gather height and light map.
		vec2 uv = pix/64.0 + 32.5/64.0;
		vec4 heightLightMap = texture( TEXTURE_1, uv);
	
		// Update position based on closest intersection.
		vec2 distances = (pix + offset)/dir.xz;
		pix += distances.x < distances.y ? vec2(step.x, 0.0) : vec2(0.0, step.y);
		vec3 oldPos = pos;
		bool withinBounds = all(lessThan(uv, vec2(1))) && all(greaterThan(uv, vec2(0)));
		pos = withinBounds ? orig + dir * min(distances.x, distances.y) : pos;
		
		// Calculate terrain height.
		float terrainHeight = dot(heightLightMap.gb, vec2(255.0, 65025.0)) - OCCLUSION_HEIGHT_OFFSET;
		
		// Pixel is within texture bounds and ray is above the terrain and it doesn't go past the framebuffer depth.
		withinBounds = withinBounds && terrainHeight < max(pos, oldPos).y && dot(worldPos+orig-oldPos, dir) > 0.0;
		
		// Add up distance marched while exposed to the sky.
		float l = (terrainHeight > min(pos, oldPos).y ? float(dir.y < 0.0) * (max(pos.y, oldPos.y)-terrainHeight)/abs(pos.y-oldPos.y) : 1.0) * length(pos-oldPos);
		L += withinBounds ? l : 0.0;
		
		// Add up lightmap based lighting.
		float groundDistance = oldPos.y - terrainHeight + 4.0;
		L2 += withinBounds ? l * heightLightMap.r * heightLightMap.r / (groundDistance*(l*dir.y + groundDistance)) : 0.0;
		
	}

	
	finalColor = vec4(ACESFitted(calcScatter(1.5*gl_LastFragColorARM.rgb, dir, dist, (max(0.0, dist-length(pos-orig))+L)/dist, sunColor)+L2*5.0*vec3(1.0, 0.6, 0.2)), 1.0);
}

